nop
#IMPORTANT:
#In this code, x21 is used as return address and x22 as stack pointer
addi x22,x0,0x1F# initialize x22 as sp
nop
nop
nop
lui t0,0x9			#wait
jal x21, DELAY
nop
nop
nop
addi a0,x0,0x28
jal x21,COMMAND
nop
nop
nop
lui t0,0x9			#wait
jal x21, DELAY
nop
nop
nop
addi a0,x0,0x0F
jal x21,COMMAND
nop
nop
nop
addi a0,x0,0x01
jal x21,COMMAND
nop
nop
nop
lui t0,0x9			#wait
jal x21, DELAY
nop
nop
nop
addi a0,x0,0x06
jal x21,COMMAND
nop
nop
nop
addi a0,x0,0x41
jal x21,DATA
nop
nop
nop
lui t0,0x300			#wait
jal x21, DELAY
nop
nop
nop
##Initialization END, Primality begin

#x12 : n number to be tested
li x12,0x456
nop
nop
#jal x21,TEST
addi x14,x0,0x1
li t5,0x1#to compare
nop
nop
nop
beq x14,t5,DISPLAY
nop
nop
nop
j END
nop
nop
#----------------------------DISPLAY-------------------
DISPLAY:
sw x21, 0(x22)
nop	#extremely important
addi x22,x22, -1

li t5,0xA#use ahead
addi a0,x0,0x01		#clear
jal x21,COMMAND
nop
nop
nop
lui t0,0x9			#wait
#addi t0,x0,1
jal x21, DELAY
nop
nop
nop
addi a0,x0,0x80		#to begining of first line
jal x21,COMMAND
nop
nop
nop
#transmission start
srli a0,x12,0x1c####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num
nop
nop
nop
notnum:addi a0,a0,0x41
j jh
nop
nop
nop
num:addi a0,a0,0x30
jh:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x18####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num2
nop
nop
nop
notnum2:addi a0,a0,0x41
j jh2
nop
nop
nop
num2:addi a0,a0,0x30
jh2:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x14####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num3
nop
nop
nop
notnum3:addi a0,a0,0x41
j jh3
nop
nop
nop
num3:addi a0,a0,0x30
jh3:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x10####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num4
nop
nop
nop
notnum4:addi a0,a0,0x41
j jh4
nop
nop
nop
num4:addi a0,a0,0x30
jh4:
jal x21,DATA
nop
nop
nop

srli a0,x12,0xc####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num5
nop
nop
nop
notnum5:addi a0,a0,0x41
j jh5
nop
nop
nop
num5:addi a0,a0,0x30
jh5:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x8####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num6
nop
nop
nop
notnum6:addi a0,a0,0x41
j jh6
nop
nop
nop
num6:addi a0,a0,0x30
jh6:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x4####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num7
nop
nop
nop
notnum7:addi a0,a0,0x41
j jh7
nop
nop
nop
num7:addi a0,a0,0x30
jh7:
jal x21,DATA
nop
nop
nop

srli a0,x12,0x0####
nop
nop
nop
andi a0,a0,0xf#clear extra values
nop
nop
nop
blt a0,t5,num8
nop
nop
nop
notnum8:addi a0,a0,0x41
j jh8
nop
nop
nop
num8:addi a0,a0,0x30
jh8:
jal x21,DATA
nop
nop
nop
#transmission end
lui t0,0x60			#wait
jal x21, DELAY
nop
nop
nop
addi x22,x22, 1
nop
nop
nop
lw x21, 0(x22)
nop
nop
nop
jr x21
nop
nop
nop

#-------------------------COMMAND---------------
COMMAND:	#Input command is in a0
sw x21, 0(x22)
nop	#extremely important
addi x22,x22, -1

srli s11,a0,4			#PART 1-----------
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
ori s11,s11,0x10		#store command,En=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
addi t0,x0,1500			#(1000x2)+2 instructions>40us
jal x21, DELAY
nop
nop			#PART 2---------------
nop
andi s11,a0,0xF		#store command,En=0
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
ori s11,s11,0x10		#store command,En=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
addi t0,x0,1500			#(1000x2)+2 instructions>40us
jal x21, DELAY
nop
nop
nop

addi x22,x22, 1
nop
nop
nop
lw x21, 0(x22)
nop
nop
nop
jr x21
nop
nop
nop

#------------DELAY-----------
DELAY:	#take input in t0
#addi t0,x0,2047
nop
nop
HERE1:
addi t0,t0,-1
nop
nop
nop
bne t0,x0,HERE1
nop
nop
nop
jr x21
nop
nop
nop
#----------------------------

#-------------------------DATA---------------
DATA:	#Input command is in a0
sw x21, 0(x22)
nop	#extremely important
addi x22,x22, -1

srli s11,a0,4			#PART 1-----------
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
nop
nop
nop
ori s11,s11,0x20		#Rs=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
ori s11,s11,0x10		#store command,En=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
addi t0,x0,1500			#(1000x2)+2 instructions>40us
jal x21, DELAY
nop
nop						#PART 2---------------
nop
andi s11,a0,0xF		#store command,En=0
nop
nop
nop
ori s11,s11,0x20		#Rs=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
ori s11,s11,0x10		#store command,En=1
addi t0,x0,1000			#(4x2)+2 instructions>1us
jal x21, DELAY
nop
nop
nop
andi s11,s11,0xF		#store command,En=0
addi t0,x0,1500			#(1000x2)+2 instructions>40us
jal x21, DELAY
nop
nop
nop

addi x22,x22, 1
nop
nop
nop
lw x21, 0(x22)
nop
nop
nop
jr x21
nop
nop
nop
######-----------------TEST------------------
TEST:

#x12 : n number to be tested
li x12,521
nop
#x13 : k is rounds to perform
li x13,10

#x11 : 1
li x11,1

#x9  : n â€“ 1
Addi x9,x12,-1


#Writing n as (2^r)*d+1
###################################################
#x15 : r
#x16 : d
nop
nop
nop
Mv x16,x9

li x15,0 #counting consecutive zeros at left
shiftloop:
nop
nop
	srli x16,x16,1
	addi x15,x15,1
nop
nop
	and x31,x11,x16 #Mask
nop
nop
nop
	beq x31,x0,shiftloop

###################################################

nop
nop
nop
witness_loop:

beq x13,x0,out_prob_prime
nop
nop
nop
addi x13,x13,-1

#Random number generation
###################################################

#x1 : Random number a
mv x1,x12
nop
nop
nop
addi x1,x1,-7

#Modular Exponentiation
###################################################
#x1 base
#x2 exponent
#x3 modulus
#x4 Result

Mv x2,x16
Mv x3,x12

addi x4,x0,1
addi x5,x0,1 #mask
nop
nop
nop
outer:
and x5,x5,x2
nop
nop
nop
beq x5,x0,skip_multiply
mul x4,x4,x1
nop
nop
nop
loop1:
sub x4,x4,x3
nop
nop
nop
bge x4,x3,loop1
nop
nop
nop
bge x4,x0,d1
nop
nop
nop
add x4,x4,x3
d1:
skip_multiply:
mul x1,x1,x1
nop
nop
nop
loop2:
sub x1,x1,x3
nop
nop
nop
bge x1,x3,loop2
nop
nop
nop
bge x1,x0,d2
nop
nop
nop
add x1,x1,x3
d2:
srli x2,x2,1
addi x5,x0,1
nop
nop
bne x2,x0,outer
addi x6,x6,10

###################################################

nop
nop
nop
Beq x4,x9,witness_loop
nop
nop
nop
Beq x4,x11,witness_loop
nop
nop
nop

Li x31,1

squareloop:
Mv x1,x4
Li x2,2
#Modular squaring
###################################################
#x1 base
#x2 exponent
#x3 modulus
#x4 Result
addi x4,x0,1
addi x5,x0,1 #mask
nop
nop
nop
outer2:
and x5,x5,x2
nop
nop
nop
beq x5,x0,skip_multiply2
nop
nop
nop
mul x4,x4,x1
nop
nop
nop
loop12:
sub x4,x4,x3
nop
nop
nop
bge x4,x3,loop12
nop
nop
nop
bge x4,x0,d12
nop
nop
nop
add x4,x4,x3
d12:
skip_multiply2:
mul x1,x1,x1
nop
nop
nop
loop22:
sub x1,x1,x3
nop
nop
nop
bge x1,x3,loop22
nop
nop
nop
bge x1,x0,d22
nop
nop
nop
add x1,x1,x3
d22:
srli x2,x2,1
addi x5,x0,1
nop
nop
bne x2,x0,outer2
nop
nop
nop
addi x6,x6,10
###################################################

Beq x4,x9,witness_loop
nop
nop
nop
Addi x31,x31,1
nop
nop
nop
Blt x31,x15,squareloop
nop
nop
nop
Li x14,1
out_prob_prime:
nop
nop
nop
addi x14,x14,1
nop
nop
nop
add s11,x0,x14
END:
j END
